// Code generated by thriftrw v1.27.0. DO NOT EDIT.
// @generated

package authtoken

import (
	errors "errors"
	fmt "fmt"
	strings "strings"

	multierr "go.uber.org/multierr"
	wire "go.uber.org/thriftrw/wire"
	zapcore "go.uber.org/zap/zapcore"
)

type AuthTokenResponse struct {
	AccessToken string `json:"access_token,required"`
	ExpiresIn   int32  `json:"expires_in,required"`
	TokenType   string `json:"token_type,required"`
}

// ToWire translates a AuthTokenResponse struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *AuthTokenResponse) ToWire() (wire.Value, error) {
	var (
		fields [3]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	w, err = wire.NewValueString(v.AccessToken), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++

	w, err = wire.NewValueI32(v.ExpiresIn), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 2, Value: w}
	i++

	w, err = wire.NewValueString(v.TokenType), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 3, Value: w}
	i++

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a AuthTokenResponse struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a AuthTokenResponse struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v AuthTokenResponse
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *AuthTokenResponse) FromWire(w wire.Value) error {
	var err error

	access_tokenIsSet := false
	expires_inIsSet := false
	token_typeIsSet := false

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				v.AccessToken, err = field.Value.GetString(), error(nil)
				if err != nil {
					return err
				}
				access_tokenIsSet = true
			}
		case 2:
			if field.Value.Type() == wire.TI32 {
				v.ExpiresIn, err = field.Value.GetI32(), error(nil)
				if err != nil {
					return err
				}
				expires_inIsSet = true
			}
		case 3:
			if field.Value.Type() == wire.TBinary {
				v.TokenType, err = field.Value.GetString(), error(nil)
				if err != nil {
					return err
				}
				token_typeIsSet = true
			}
		}
	}

	if !access_tokenIsSet {
		return errors.New("field AccessToken of AuthTokenResponse is required")
	}

	if !expires_inIsSet {
		return errors.New("field ExpiresIn of AuthTokenResponse is required")
	}

	if !token_typeIsSet {
		return errors.New("field TokenType of AuthTokenResponse is required")
	}

	return nil
}

// String returns a readable string representation of a AuthTokenResponse
// struct.
func (v *AuthTokenResponse) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [3]string
	i := 0
	fields[i] = fmt.Sprintf("AccessToken: %v", v.AccessToken)
	i++
	fields[i] = fmt.Sprintf("ExpiresIn: %v", v.ExpiresIn)
	i++
	fields[i] = fmt.Sprintf("TokenType: %v", v.TokenType)
	i++

	return fmt.Sprintf("AuthTokenResponse{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this AuthTokenResponse match the
// provided AuthTokenResponse.
//
// This function performs a deep comparison.
func (v *AuthTokenResponse) Equals(rhs *AuthTokenResponse) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}
	if !(v.AccessToken == rhs.AccessToken) {
		return false
	}
	if !(v.ExpiresIn == rhs.ExpiresIn) {
		return false
	}
	if !(v.TokenType == rhs.TokenType) {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of AuthTokenResponse.
func (v *AuthTokenResponse) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	enc.AddString("access_token", v.AccessToken)
	enc.AddInt32("expires_in", v.ExpiresIn)
	enc.AddString("token_type", v.TokenType)
	return err
}

// GetAccessToken returns the value of AccessToken if it is set or its
// zero value if it is unset.
func (v *AuthTokenResponse) GetAccessToken() (o string) {
	if v != nil {
		o = v.AccessToken
	}
	return
}

// GetExpiresIn returns the value of ExpiresIn if it is set or its
// zero value if it is unset.
func (v *AuthTokenResponse) GetExpiresIn() (o int32) {
	if v != nil {
		o = v.ExpiresIn
	}
	return
}

// GetTokenType returns the value of TokenType if it is set or its
// zero value if it is unset.
func (v *AuthTokenResponse) GetTokenType() (o string) {
	if v != nil {
		o = v.TokenType
	}
	return
}

type Product struct {
	ID          int32  `json:"id,required"`
	Name        string `json:"name,required"`
	Year        int32  `json:"year,required"`
	Color       string `json:"color,required"`
	PantoneValu string `json:"pantone_valu,required"`
}

// ToWire translates a Product struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *Product) ToWire() (wire.Value, error) {
	var (
		fields [5]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	w, err = wire.NewValueI32(v.ID), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++

	w, err = wire.NewValueString(v.Name), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 2, Value: w}
	i++

	w, err = wire.NewValueI32(v.Year), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 3, Value: w}
	i++

	w, err = wire.NewValueString(v.Color), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 4, Value: w}
	i++

	w, err = wire.NewValueString(v.PantoneValu), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 5, Value: w}
	i++

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a Product struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a Product struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v Product
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *Product) FromWire(w wire.Value) error {
	var err error

	idIsSet := false
	nameIsSet := false
	yearIsSet := false
	colorIsSet := false
	pantone_valuIsSet := false

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TI32 {
				v.ID, err = field.Value.GetI32(), error(nil)
				if err != nil {
					return err
				}
				idIsSet = true
			}
		case 2:
			if field.Value.Type() == wire.TBinary {
				v.Name, err = field.Value.GetString(), error(nil)
				if err != nil {
					return err
				}
				nameIsSet = true
			}
		case 3:
			if field.Value.Type() == wire.TI32 {
				v.Year, err = field.Value.GetI32(), error(nil)
				if err != nil {
					return err
				}
				yearIsSet = true
			}
		case 4:
			if field.Value.Type() == wire.TBinary {
				v.Color, err = field.Value.GetString(), error(nil)
				if err != nil {
					return err
				}
				colorIsSet = true
			}
		case 5:
			if field.Value.Type() == wire.TBinary {
				v.PantoneValu, err = field.Value.GetString(), error(nil)
				if err != nil {
					return err
				}
				pantone_valuIsSet = true
			}
		}
	}

	if !idIsSet {
		return errors.New("field ID of Product is required")
	}

	if !nameIsSet {
		return errors.New("field Name of Product is required")
	}

	if !yearIsSet {
		return errors.New("field Year of Product is required")
	}

	if !colorIsSet {
		return errors.New("field Color of Product is required")
	}

	if !pantone_valuIsSet {
		return errors.New("field PantoneValu of Product is required")
	}

	return nil
}

// String returns a readable string representation of a Product
// struct.
func (v *Product) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [5]string
	i := 0
	fields[i] = fmt.Sprintf("ID: %v", v.ID)
	i++
	fields[i] = fmt.Sprintf("Name: %v", v.Name)
	i++
	fields[i] = fmt.Sprintf("Year: %v", v.Year)
	i++
	fields[i] = fmt.Sprintf("Color: %v", v.Color)
	i++
	fields[i] = fmt.Sprintf("PantoneValu: %v", v.PantoneValu)
	i++

	return fmt.Sprintf("Product{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this Product match the
// provided Product.
//
// This function performs a deep comparison.
func (v *Product) Equals(rhs *Product) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}
	if !(v.ID == rhs.ID) {
		return false
	}
	if !(v.Name == rhs.Name) {
		return false
	}
	if !(v.Year == rhs.Year) {
		return false
	}
	if !(v.Color == rhs.Color) {
		return false
	}
	if !(v.PantoneValu == rhs.PantoneValu) {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of Product.
func (v *Product) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	enc.AddInt32("id", v.ID)
	enc.AddString("name", v.Name)
	enc.AddInt32("year", v.Year)
	enc.AddString("color", v.Color)
	enc.AddString("pantone_valu", v.PantoneValu)
	return err
}

// GetID returns the value of ID if it is set or its
// zero value if it is unset.
func (v *Product) GetID() (o int32) {
	if v != nil {
		o = v.ID
	}
	return
}

// GetName returns the value of Name if it is set or its
// zero value if it is unset.
func (v *Product) GetName() (o string) {
	if v != nil {
		o = v.Name
	}
	return
}

// GetYear returns the value of Year if it is set or its
// zero value if it is unset.
func (v *Product) GetYear() (o int32) {
	if v != nil {
		o = v.Year
	}
	return
}

// GetColor returns the value of Color if it is set or its
// zero value if it is unset.
func (v *Product) GetColor() (o string) {
	if v != nil {
		o = v.Color
	}
	return
}

// GetPantoneValu returns the value of PantoneValu if it is set or its
// zero value if it is unset.
func (v *Product) GetPantoneValu() (o string) {
	if v != nil {
		o = v.PantoneValu
	}
	return
}

type ProductResponse struct {
	Data *Product `json:"data,required"`
}

// ToWire translates a ProductResponse struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *ProductResponse) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Data == nil {
		return w, errors.New("field Data of ProductResponse is required")
	}
	w, err = v.Data.ToWire()
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _Product_Read(w wire.Value) (*Product, error) {
	var v Product
	err := v.FromWire(w)
	return &v, err
}

// FromWire deserializes a ProductResponse struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a ProductResponse struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v ProductResponse
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *ProductResponse) FromWire(w wire.Value) error {
	var err error

	dataIsSet := false

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TStruct {
				v.Data, err = _Product_Read(field.Value)
				if err != nil {
					return err
				}
				dataIsSet = true
			}
		}
	}

	if !dataIsSet {
		return errors.New("field Data of ProductResponse is required")
	}

	return nil
}

// String returns a readable string representation of a ProductResponse
// struct.
func (v *ProductResponse) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [1]string
	i := 0
	fields[i] = fmt.Sprintf("Data: %v", v.Data)
	i++

	return fmt.Sprintf("ProductResponse{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this ProductResponse match the
// provided ProductResponse.
//
// This function performs a deep comparison.
func (v *ProductResponse) Equals(rhs *ProductResponse) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}
	if !v.Data.Equals(rhs.Data) {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of ProductResponse.
func (v *ProductResponse) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	err = multierr.Append(err, enc.AddObject("data", v.Data))
	return err
}

// GetData returns the value of Data if it is set or its
// zero value if it is unset.
func (v *ProductResponse) GetData() (o *Product) {
	if v != nil {
		o = v.Data
	}
	return
}

// IsSetData returns true if Data is not nil.
func (v *ProductResponse) IsSetData() bool {
	return v != nil && v.Data != nil
}

type _List_Product_ValueList []*Product

func (v _List_Product_ValueList) ForEach(f func(wire.Value) error) error {
	for i, x := range v {
		if x == nil {
			return fmt.Errorf("invalid [%v]: value is nil", i)
		}
		w, err := x.ToWire()
		if err != nil {
			return err
		}
		err = f(w)
		if err != nil {
			return err
		}
	}
	return nil
}

func (v _List_Product_ValueList) Size() int {
	return len(v)
}

func (_List_Product_ValueList) ValueType() wire.Type {
	return wire.TStruct
}

func (_List_Product_ValueList) Close() {}

func _List_Product_Read(l wire.ValueList) ([]*Product, error) {
	if l.ValueType() != wire.TStruct {
		return nil, nil
	}

	o := make([]*Product, 0, l.Size())
	err := l.ForEach(func(x wire.Value) error {
		i, err := _Product_Read(x)
		if err != nil {
			return err
		}
		o = append(o, i)
		return nil
	})
	l.Close()
	return o, err
}

func _List_Product_Equals(lhs, rhs []*Product) bool {
	if len(lhs) != len(rhs) {
		return false
	}

	for i, lv := range lhs {
		rv := rhs[i]
		if !lv.Equals(rv) {
			return false
		}
	}

	return true
}

type _List_Product_Zapper []*Product

// MarshalLogArray implements zapcore.ArrayMarshaler, enabling
// fast logging of _List_Product_Zapper.
func (l _List_Product_Zapper) MarshalLogArray(enc zapcore.ArrayEncoder) (err error) {
	for _, v := range l {
		err = multierr.Append(err, enc.AppendObject(v))
	}
	return err
}

type ProductsList []*Product

// ToWire translates ProductsList into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
func (v ProductsList) ToWire() (wire.Value, error) {
	x := ([]*Product)(v)
	return wire.NewValueList(_List_Product_ValueList(x)), error(nil)
}

// String returns a readable string representation of ProductsList.
func (v ProductsList) String() string {
	x := ([]*Product)(v)
	return fmt.Sprint(x)
}

// FromWire deserializes ProductsList from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
func (v *ProductsList) FromWire(w wire.Value) error {
	x, err := _List_Product_Read(w.GetList())
	*v = (ProductsList)(x)
	return err
}

// Equals returns true if this ProductsList is equal to the provided
// ProductsList.
func (lhs ProductsList) Equals(rhs ProductsList) bool {
	return _List_Product_Equals(([]*Product)(lhs), ([]*Product)(rhs))
}

func (v ProductsList) MarshalLogArray(enc zapcore.ArrayEncoder) error {
	return ((_List_Product_Zapper)(([]*Product)(v))).MarshalLogArray(enc)
}

type ProductsResponse struct {
	Data ProductsList `json:"data,required"`
}

// ToWire translates a ProductsResponse struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *ProductsResponse) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	w, err = v.Data.ToWire()
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _ProductsList_Read(w wire.Value) (ProductsList, error) {
	var x ProductsList
	err := x.FromWire(w)
	return x, err
}

// FromWire deserializes a ProductsResponse struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a ProductsResponse struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v ProductsResponse
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *ProductsResponse) FromWire(w wire.Value) error {
	var err error

	dataIsSet := false

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TList {
				v.Data, err = _ProductsList_Read(field.Value)
				if err != nil {
					return err
				}
				dataIsSet = true
			}
		}
	}

	if !dataIsSet {
		return errors.New("field Data of ProductsResponse is required")
	}

	return nil
}

// String returns a readable string representation of a ProductsResponse
// struct.
func (v *ProductsResponse) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [1]string
	i := 0
	fields[i] = fmt.Sprintf("Data: %v", v.Data)
	i++

	return fmt.Sprintf("ProductsResponse{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this ProductsResponse match the
// provided ProductsResponse.
//
// This function performs a deep comparison.
func (v *ProductsResponse) Equals(rhs *ProductsResponse) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}
	if !v.Data.Equals(rhs.Data) {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of ProductsResponse.
func (v *ProductsResponse) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	err = multierr.Append(err, enc.AddArray("data", (_List_Product_Zapper)(v.Data)))
	return err
}

// GetData returns the value of Data if it is set or its
// zero value if it is unset.
func (v *ProductsResponse) GetData() (o ProductsList) {
	if v != nil {
		o = v.Data
	}
	return
}

// IsSetData returns true if Data is not nil.
func (v *ProductsResponse) IsSetData() bool {
	return v != nil && v.Data != nil
}

// AuthToken_GetAuthToken_Args represents the arguments for the AuthToken.getAuthToken function.
//
// The arguments for getAuthToken are sent and received over the wire as this struct.
type AuthToken_GetAuthToken_Args struct {
	Authorization           string `json:"-"`
	FastPlatformCredentials string `json:"-"`
}

// ToWire translates a AuthToken_GetAuthToken_Args struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *AuthToken_GetAuthToken_Args) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	w, err = wire.NewValueString(v.Authorization), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++

	w, err = wire.NewValueString(v.FastPlatformCredentials), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 2, Value: w}
	i++

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a AuthToken_GetAuthToken_Args struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a AuthToken_GetAuthToken_Args struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v AuthToken_GetAuthToken_Args
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *AuthToken_GetAuthToken_Args) FromWire(w wire.Value) error {
	var err error

	authorizationIsSet := false
	fastPlatformCredentialsIsSet := false

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				v.Authorization, err = field.Value.GetString(), error(nil)
				if err != nil {
					return err
				}
				authorizationIsSet = true
			}
		case 2:
			if field.Value.Type() == wire.TBinary {
				v.FastPlatformCredentials, err = field.Value.GetString(), error(nil)
				if err != nil {
					return err
				}
				fastPlatformCredentialsIsSet = true
			}
		}
	}

	if !authorizationIsSet {
		return errors.New("field Authorization of AuthToken_GetAuthToken_Args is required")
	}

	if !fastPlatformCredentialsIsSet {
		return errors.New("field FastPlatformCredentials of AuthToken_GetAuthToken_Args is required")
	}

	return nil
}

// String returns a readable string representation of a AuthToken_GetAuthToken_Args
// struct.
func (v *AuthToken_GetAuthToken_Args) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [2]string
	i := 0
	fields[i] = fmt.Sprintf("Authorization: %v", v.Authorization)
	i++
	fields[i] = fmt.Sprintf("FastPlatformCredentials: %v", v.FastPlatformCredentials)
	i++

	return fmt.Sprintf("AuthToken_GetAuthToken_Args{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this AuthToken_GetAuthToken_Args match the
// provided AuthToken_GetAuthToken_Args.
//
// This function performs a deep comparison.
func (v *AuthToken_GetAuthToken_Args) Equals(rhs *AuthToken_GetAuthToken_Args) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}
	if !(v.Authorization == rhs.Authorization) {
		return false
	}
	if !(v.FastPlatformCredentials == rhs.FastPlatformCredentials) {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of AuthToken_GetAuthToken_Args.
func (v *AuthToken_GetAuthToken_Args) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	enc.AddString("authorization", v.Authorization)
	enc.AddString("fastPlatformCredentials", v.FastPlatformCredentials)
	return err
}

// GetAuthorization returns the value of Authorization if it is set or its
// zero value if it is unset.
func (v *AuthToken_GetAuthToken_Args) GetAuthorization() (o string) {
	if v != nil {
		o = v.Authorization
	}
	return
}

// GetFastPlatformCredentials returns the value of FastPlatformCredentials if it is set or its
// zero value if it is unset.
func (v *AuthToken_GetAuthToken_Args) GetFastPlatformCredentials() (o string) {
	if v != nil {
		o = v.FastPlatformCredentials
	}
	return
}

// MethodName returns the name of the Thrift function as specified in
// the IDL, for which this struct represent the arguments.
//
// This will always be "getAuthToken" for this struct.
func (v *AuthToken_GetAuthToken_Args) MethodName() string {
	return "getAuthToken"
}

// EnvelopeType returns the kind of value inside this struct.
//
// This will always be Call for this struct.
func (v *AuthToken_GetAuthToken_Args) EnvelopeType() wire.EnvelopeType {
	return wire.Call
}

// AuthToken_GetAuthToken_Helper provides functions that aid in handling the
// parameters and return values of the AuthToken.getAuthToken
// function.
var AuthToken_GetAuthToken_Helper = struct {
	// Args accepts the parameters of getAuthToken in-order and returns
	// the arguments struct for the function.
	Args func(
		authorization string,
		fastPlatformCredentials string,
	) *AuthToken_GetAuthToken_Args

	// IsException returns true if the given error can be thrown
	// by getAuthToken.
	//
	// An error can be thrown by getAuthToken only if the
	// corresponding exception type was mentioned in the 'throws'
	// section for it in the Thrift file.
	IsException func(error) bool

	// WrapResponse returns the result struct for getAuthToken
	// given its return value and error.
	//
	// This allows mapping values and errors returned by
	// getAuthToken into a serializable result struct.
	// WrapResponse returns a non-nil error if the provided
	// error cannot be thrown by getAuthToken
	//
	//   value, err := getAuthToken(args)
	//   result, err := AuthToken_GetAuthToken_Helper.WrapResponse(value, err)
	//   if err != nil {
	//     return fmt.Errorf("unexpected error from getAuthToken: %v", err)
	//   }
	//   serialize(result)
	WrapResponse func(*AuthTokenResponse, error) (*AuthToken_GetAuthToken_Result, error)

	// UnwrapResponse takes the result struct for getAuthToken
	// and returns the value or error returned by it.
	//
	// The error is non-nil only if getAuthToken threw an
	// exception.
	//
	//   result := deserialize(bytes)
	//   value, err := AuthToken_GetAuthToken_Helper.UnwrapResponse(result)
	UnwrapResponse func(*AuthToken_GetAuthToken_Result) (*AuthTokenResponse, error)
}{}

func init() {
	AuthToken_GetAuthToken_Helper.Args = func(
		authorization string,
		fastPlatformCredentials string,
	) *AuthToken_GetAuthToken_Args {
		return &AuthToken_GetAuthToken_Args{
			Authorization:           authorization,
			FastPlatformCredentials: fastPlatformCredentials,
		}
	}

	AuthToken_GetAuthToken_Helper.IsException = func(err error) bool {
		switch err.(type) {
		default:
			return false
		}
	}

	AuthToken_GetAuthToken_Helper.WrapResponse = func(success *AuthTokenResponse, err error) (*AuthToken_GetAuthToken_Result, error) {
		if err == nil {
			return &AuthToken_GetAuthToken_Result{Success: success}, nil
		}

		return nil, err
	}
	AuthToken_GetAuthToken_Helper.UnwrapResponse = func(result *AuthToken_GetAuthToken_Result) (success *AuthTokenResponse, err error) {

		if result.Success != nil {
			success = result.Success
			return
		}

		err = errors.New("expected a non-void result")
		return
	}

}

// AuthToken_GetAuthToken_Result represents the result of a AuthToken.getAuthToken function call.
//
// The result of a getAuthToken execution is sent and received over the wire as this struct.
//
// Success is set only if the function did not throw an exception.
type AuthToken_GetAuthToken_Result struct {
	// Value returned by getAuthToken after a successful execution.
	Success *AuthTokenResponse `json:"success,omitempty"`
}

// ToWire translates a AuthToken_GetAuthToken_Result struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *AuthToken_GetAuthToken_Result) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Success != nil {
		w, err = v.Success.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 0, Value: w}
		i++
	}

	if i != 1 {
		return wire.Value{}, fmt.Errorf("AuthToken_GetAuthToken_Result should have exactly one field: got %v fields", i)
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _AuthTokenResponse_Read(w wire.Value) (*AuthTokenResponse, error) {
	var v AuthTokenResponse
	err := v.FromWire(w)
	return &v, err
}

// FromWire deserializes a AuthToken_GetAuthToken_Result struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a AuthToken_GetAuthToken_Result struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v AuthToken_GetAuthToken_Result
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *AuthToken_GetAuthToken_Result) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 0:
			if field.Value.Type() == wire.TStruct {
				v.Success, err = _AuthTokenResponse_Read(field.Value)
				if err != nil {
					return err
				}

			}
		}
	}

	count := 0
	if v.Success != nil {
		count++
	}
	if count != 1 {
		return fmt.Errorf("AuthToken_GetAuthToken_Result should have exactly one field: got %v fields", count)
	}

	return nil
}

// String returns a readable string representation of a AuthToken_GetAuthToken_Result
// struct.
func (v *AuthToken_GetAuthToken_Result) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [1]string
	i := 0
	if v.Success != nil {
		fields[i] = fmt.Sprintf("Success: %v", v.Success)
		i++
	}

	return fmt.Sprintf("AuthToken_GetAuthToken_Result{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this AuthToken_GetAuthToken_Result match the
// provided AuthToken_GetAuthToken_Result.
//
// This function performs a deep comparison.
func (v *AuthToken_GetAuthToken_Result) Equals(rhs *AuthToken_GetAuthToken_Result) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}
	if !((v.Success == nil && rhs.Success == nil) || (v.Success != nil && rhs.Success != nil && v.Success.Equals(rhs.Success))) {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of AuthToken_GetAuthToken_Result.
func (v *AuthToken_GetAuthToken_Result) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	if v.Success != nil {
		err = multierr.Append(err, enc.AddObject("success", v.Success))
	}
	return err
}

// GetSuccess returns the value of Success if it is set or its
// zero value if it is unset.
func (v *AuthToken_GetAuthToken_Result) GetSuccess() (o *AuthTokenResponse) {
	if v != nil && v.Success != nil {
		return v.Success
	}

	return
}

// IsSetSuccess returns true if Success is not nil.
func (v *AuthToken_GetAuthToken_Result) IsSetSuccess() bool {
	return v != nil && v.Success != nil
}

// MethodName returns the name of the Thrift function as specified in
// the IDL, for which this struct represent the result.
//
// This will always be "getAuthToken" for this struct.
func (v *AuthToken_GetAuthToken_Result) MethodName() string {
	return "getAuthToken"
}

// EnvelopeType returns the kind of value inside this struct.
//
// This will always be Reply for this struct.
func (v *AuthToken_GetAuthToken_Result) EnvelopeType() wire.EnvelopeType {
	return wire.Reply
}

// Products_GetProduct_Args represents the arguments for the Products.getProduct function.
//
// The arguments for getProduct are sent and received over the wire as this struct.
type Products_GetProduct_Args struct {
	ProductID int32 `json:"product_id,required"`
}

// ToWire translates a Products_GetProduct_Args struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *Products_GetProduct_Args) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	w, err = wire.NewValueI32(v.ProductID), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a Products_GetProduct_Args struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a Products_GetProduct_Args struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v Products_GetProduct_Args
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *Products_GetProduct_Args) FromWire(w wire.Value) error {
	var err error

	product_idIsSet := false

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TI32 {
				v.ProductID, err = field.Value.GetI32(), error(nil)
				if err != nil {
					return err
				}
				product_idIsSet = true
			}
		}
	}

	if !product_idIsSet {
		return errors.New("field ProductID of Products_GetProduct_Args is required")
	}

	return nil
}

// String returns a readable string representation of a Products_GetProduct_Args
// struct.
func (v *Products_GetProduct_Args) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [1]string
	i := 0
	fields[i] = fmt.Sprintf("ProductID: %v", v.ProductID)
	i++

	return fmt.Sprintf("Products_GetProduct_Args{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this Products_GetProduct_Args match the
// provided Products_GetProduct_Args.
//
// This function performs a deep comparison.
func (v *Products_GetProduct_Args) Equals(rhs *Products_GetProduct_Args) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}
	if !(v.ProductID == rhs.ProductID) {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of Products_GetProduct_Args.
func (v *Products_GetProduct_Args) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	enc.AddInt32("product_id", v.ProductID)
	return err
}

// GetProductID returns the value of ProductID if it is set or its
// zero value if it is unset.
func (v *Products_GetProduct_Args) GetProductID() (o int32) {
	if v != nil {
		o = v.ProductID
	}
	return
}

// MethodName returns the name of the Thrift function as specified in
// the IDL, for which this struct represent the arguments.
//
// This will always be "getProduct" for this struct.
func (v *Products_GetProduct_Args) MethodName() string {
	return "getProduct"
}

// EnvelopeType returns the kind of value inside this struct.
//
// This will always be Call for this struct.
func (v *Products_GetProduct_Args) EnvelopeType() wire.EnvelopeType {
	return wire.Call
}

// Products_GetProduct_Helper provides functions that aid in handling the
// parameters and return values of the Products.getProduct
// function.
var Products_GetProduct_Helper = struct {
	// Args accepts the parameters of getProduct in-order and returns
	// the arguments struct for the function.
	Args func(
		product_id int32,
	) *Products_GetProduct_Args

	// IsException returns true if the given error can be thrown
	// by getProduct.
	//
	// An error can be thrown by getProduct only if the
	// corresponding exception type was mentioned in the 'throws'
	// section for it in the Thrift file.
	IsException func(error) bool

	// WrapResponse returns the result struct for getProduct
	// given its return value and error.
	//
	// This allows mapping values and errors returned by
	// getProduct into a serializable result struct.
	// WrapResponse returns a non-nil error if the provided
	// error cannot be thrown by getProduct
	//
	//   value, err := getProduct(args)
	//   result, err := Products_GetProduct_Helper.WrapResponse(value, err)
	//   if err != nil {
	//     return fmt.Errorf("unexpected error from getProduct: %v", err)
	//   }
	//   serialize(result)
	WrapResponse func(*ProductResponse, error) (*Products_GetProduct_Result, error)

	// UnwrapResponse takes the result struct for getProduct
	// and returns the value or error returned by it.
	//
	// The error is non-nil only if getProduct threw an
	// exception.
	//
	//   result := deserialize(bytes)
	//   value, err := Products_GetProduct_Helper.UnwrapResponse(result)
	UnwrapResponse func(*Products_GetProduct_Result) (*ProductResponse, error)
}{}

func init() {
	Products_GetProduct_Helper.Args = func(
		product_id int32,
	) *Products_GetProduct_Args {
		return &Products_GetProduct_Args{
			ProductID: product_id,
		}
	}

	Products_GetProduct_Helper.IsException = func(err error) bool {
		switch err.(type) {
		default:
			return false
		}
	}

	Products_GetProduct_Helper.WrapResponse = func(success *ProductResponse, err error) (*Products_GetProduct_Result, error) {
		if err == nil {
			return &Products_GetProduct_Result{Success: success}, nil
		}

		return nil, err
	}
	Products_GetProduct_Helper.UnwrapResponse = func(result *Products_GetProduct_Result) (success *ProductResponse, err error) {

		if result.Success != nil {
			success = result.Success
			return
		}

		err = errors.New("expected a non-void result")
		return
	}

}

// Products_GetProduct_Result represents the result of a Products.getProduct function call.
//
// The result of a getProduct execution is sent and received over the wire as this struct.
//
// Success is set only if the function did not throw an exception.
type Products_GetProduct_Result struct {
	// Value returned by getProduct after a successful execution.
	Success *ProductResponse `json:"success,omitempty"`
}

// ToWire translates a Products_GetProduct_Result struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *Products_GetProduct_Result) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Success != nil {
		w, err = v.Success.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 0, Value: w}
		i++
	}

	if i != 1 {
		return wire.Value{}, fmt.Errorf("Products_GetProduct_Result should have exactly one field: got %v fields", i)
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _ProductResponse_Read(w wire.Value) (*ProductResponse, error) {
	var v ProductResponse
	err := v.FromWire(w)
	return &v, err
}

// FromWire deserializes a Products_GetProduct_Result struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a Products_GetProduct_Result struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v Products_GetProduct_Result
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *Products_GetProduct_Result) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 0:
			if field.Value.Type() == wire.TStruct {
				v.Success, err = _ProductResponse_Read(field.Value)
				if err != nil {
					return err
				}

			}
		}
	}

	count := 0
	if v.Success != nil {
		count++
	}
	if count != 1 {
		return fmt.Errorf("Products_GetProduct_Result should have exactly one field: got %v fields", count)
	}

	return nil
}

// String returns a readable string representation of a Products_GetProduct_Result
// struct.
func (v *Products_GetProduct_Result) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [1]string
	i := 0
	if v.Success != nil {
		fields[i] = fmt.Sprintf("Success: %v", v.Success)
		i++
	}

	return fmt.Sprintf("Products_GetProduct_Result{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this Products_GetProduct_Result match the
// provided Products_GetProduct_Result.
//
// This function performs a deep comparison.
func (v *Products_GetProduct_Result) Equals(rhs *Products_GetProduct_Result) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}
	if !((v.Success == nil && rhs.Success == nil) || (v.Success != nil && rhs.Success != nil && v.Success.Equals(rhs.Success))) {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of Products_GetProduct_Result.
func (v *Products_GetProduct_Result) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	if v.Success != nil {
		err = multierr.Append(err, enc.AddObject("success", v.Success))
	}
	return err
}

// GetSuccess returns the value of Success if it is set or its
// zero value if it is unset.
func (v *Products_GetProduct_Result) GetSuccess() (o *ProductResponse) {
	if v != nil && v.Success != nil {
		return v.Success
	}

	return
}

// IsSetSuccess returns true if Success is not nil.
func (v *Products_GetProduct_Result) IsSetSuccess() bool {
	return v != nil && v.Success != nil
}

// MethodName returns the name of the Thrift function as specified in
// the IDL, for which this struct represent the result.
//
// This will always be "getProduct" for this struct.
func (v *Products_GetProduct_Result) MethodName() string {
	return "getProduct"
}

// EnvelopeType returns the kind of value inside this struct.
//
// This will always be Reply for this struct.
func (v *Products_GetProduct_Result) EnvelopeType() wire.EnvelopeType {
	return wire.Reply
}

// Products_GetProducts_Args represents the arguments for the Products.getProducts function.
//
// The arguments for getProducts are sent and received over the wire as this struct.
type Products_GetProducts_Args struct {
}

// ToWire translates a Products_GetProducts_Args struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *Products_GetProducts_Args) ToWire() (wire.Value, error) {
	var (
		fields [0]wire.Field
		i      int = 0
	)

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a Products_GetProducts_Args struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a Products_GetProducts_Args struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v Products_GetProducts_Args
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *Products_GetProducts_Args) FromWire(w wire.Value) error {

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		}
	}

	return nil
}

// String returns a readable string representation of a Products_GetProducts_Args
// struct.
func (v *Products_GetProducts_Args) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [0]string
	i := 0

	return fmt.Sprintf("Products_GetProducts_Args{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this Products_GetProducts_Args match the
// provided Products_GetProducts_Args.
//
// This function performs a deep comparison.
func (v *Products_GetProducts_Args) Equals(rhs *Products_GetProducts_Args) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of Products_GetProducts_Args.
func (v *Products_GetProducts_Args) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	return err
}

// MethodName returns the name of the Thrift function as specified in
// the IDL, for which this struct represent the arguments.
//
// This will always be "getProducts" for this struct.
func (v *Products_GetProducts_Args) MethodName() string {
	return "getProducts"
}

// EnvelopeType returns the kind of value inside this struct.
//
// This will always be Call for this struct.
func (v *Products_GetProducts_Args) EnvelopeType() wire.EnvelopeType {
	return wire.Call
}

// Products_GetProducts_Helper provides functions that aid in handling the
// parameters and return values of the Products.getProducts
// function.
var Products_GetProducts_Helper = struct {
	// Args accepts the parameters of getProducts in-order and returns
	// the arguments struct for the function.
	Args func() *Products_GetProducts_Args

	// IsException returns true if the given error can be thrown
	// by getProducts.
	//
	// An error can be thrown by getProducts only if the
	// corresponding exception type was mentioned in the 'throws'
	// section for it in the Thrift file.
	IsException func(error) bool

	// WrapResponse returns the result struct for getProducts
	// given its return value and error.
	//
	// This allows mapping values and errors returned by
	// getProducts into a serializable result struct.
	// WrapResponse returns a non-nil error if the provided
	// error cannot be thrown by getProducts
	//
	//   value, err := getProducts(args)
	//   result, err := Products_GetProducts_Helper.WrapResponse(value, err)
	//   if err != nil {
	//     return fmt.Errorf("unexpected error from getProducts: %v", err)
	//   }
	//   serialize(result)
	WrapResponse func(*ProductsResponse, error) (*Products_GetProducts_Result, error)

	// UnwrapResponse takes the result struct for getProducts
	// and returns the value or error returned by it.
	//
	// The error is non-nil only if getProducts threw an
	// exception.
	//
	//   result := deserialize(bytes)
	//   value, err := Products_GetProducts_Helper.UnwrapResponse(result)
	UnwrapResponse func(*Products_GetProducts_Result) (*ProductsResponse, error)
}{}

func init() {
	Products_GetProducts_Helper.Args = func() *Products_GetProducts_Args {
		return &Products_GetProducts_Args{}
	}

	Products_GetProducts_Helper.IsException = func(err error) bool {
		switch err.(type) {
		default:
			return false
		}
	}

	Products_GetProducts_Helper.WrapResponse = func(success *ProductsResponse, err error) (*Products_GetProducts_Result, error) {
		if err == nil {
			return &Products_GetProducts_Result{Success: success}, nil
		}

		return nil, err
	}
	Products_GetProducts_Helper.UnwrapResponse = func(result *Products_GetProducts_Result) (success *ProductsResponse, err error) {

		if result.Success != nil {
			success = result.Success
			return
		}

		err = errors.New("expected a non-void result")
		return
	}

}

// Products_GetProducts_Result represents the result of a Products.getProducts function call.
//
// The result of a getProducts execution is sent and received over the wire as this struct.
//
// Success is set only if the function did not throw an exception.
type Products_GetProducts_Result struct {
	// Value returned by getProducts after a successful execution.
	Success *ProductsResponse `json:"success,omitempty"`
}

// ToWire translates a Products_GetProducts_Result struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *Products_GetProducts_Result) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Success != nil {
		w, err = v.Success.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 0, Value: w}
		i++
	}

	if i != 1 {
		return wire.Value{}, fmt.Errorf("Products_GetProducts_Result should have exactly one field: got %v fields", i)
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _ProductsResponse_Read(w wire.Value) (*ProductsResponse, error) {
	var v ProductsResponse
	err := v.FromWire(w)
	return &v, err
}

// FromWire deserializes a Products_GetProducts_Result struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a Products_GetProducts_Result struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v Products_GetProducts_Result
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *Products_GetProducts_Result) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 0:
			if field.Value.Type() == wire.TStruct {
				v.Success, err = _ProductsResponse_Read(field.Value)
				if err != nil {
					return err
				}

			}
		}
	}

	count := 0
	if v.Success != nil {
		count++
	}
	if count != 1 {
		return fmt.Errorf("Products_GetProducts_Result should have exactly one field: got %v fields", count)
	}

	return nil
}

// String returns a readable string representation of a Products_GetProducts_Result
// struct.
func (v *Products_GetProducts_Result) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [1]string
	i := 0
	if v.Success != nil {
		fields[i] = fmt.Sprintf("Success: %v", v.Success)
		i++
	}

	return fmt.Sprintf("Products_GetProducts_Result{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this Products_GetProducts_Result match the
// provided Products_GetProducts_Result.
//
// This function performs a deep comparison.
func (v *Products_GetProducts_Result) Equals(rhs *Products_GetProducts_Result) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}
	if !((v.Success == nil && rhs.Success == nil) || (v.Success != nil && rhs.Success != nil && v.Success.Equals(rhs.Success))) {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of Products_GetProducts_Result.
func (v *Products_GetProducts_Result) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	if v.Success != nil {
		err = multierr.Append(err, enc.AddObject("success", v.Success))
	}
	return err
}

// GetSuccess returns the value of Success if it is set or its
// zero value if it is unset.
func (v *Products_GetProducts_Result) GetSuccess() (o *ProductsResponse) {
	if v != nil && v.Success != nil {
		return v.Success
	}

	return
}

// IsSetSuccess returns true if Success is not nil.
func (v *Products_GetProducts_Result) IsSetSuccess() bool {
	return v != nil && v.Success != nil
}

// MethodName returns the name of the Thrift function as specified in
// the IDL, for which this struct represent the result.
//
// This will always be "getProducts" for this struct.
func (v *Products_GetProducts_Result) MethodName() string {
	return "getProducts"
}

// EnvelopeType returns the kind of value inside this struct.
//
// This will always be Reply for this struct.
func (v *Products_GetProducts_Result) EnvelopeType() wire.EnvelopeType {
	return wire.Reply
}
