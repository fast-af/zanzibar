// Code generated by thriftrw v1.27.0. DO NOT EDIT.
// @generated

package authtoken

import (
	errors "errors"
	fmt "fmt"
	strings "strings"

	multierr "go.uber.org/multierr"
	wire "go.uber.org/thriftrw/wire"
	zapcore "go.uber.org/zap/zapcore"
)

type AuthTokenResponse struct {
	AccessToken string `json:"access_token,required"`
	ExpiresIn   int32  `json:"expires_in,required"`
	TokenType   string `json:"token_type,required"`
}

// ToWire translates a AuthTokenResponse struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *AuthTokenResponse) ToWire() (wire.Value, error) {
	var (
		fields [3]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	w, err = wire.NewValueString(v.AccessToken), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++

	w, err = wire.NewValueI32(v.ExpiresIn), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 2, Value: w}
	i++

	w, err = wire.NewValueString(v.TokenType), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 3, Value: w}
	i++

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a AuthTokenResponse struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a AuthTokenResponse struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v AuthTokenResponse
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *AuthTokenResponse) FromWire(w wire.Value) error {
	var err error

	access_tokenIsSet := false
	expires_inIsSet := false
	token_typeIsSet := false

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				v.AccessToken, err = field.Value.GetString(), error(nil)
				if err != nil {
					return err
				}
				access_tokenIsSet = true
			}
		case 2:
			if field.Value.Type() == wire.TI32 {
				v.ExpiresIn, err = field.Value.GetI32(), error(nil)
				if err != nil {
					return err
				}
				expires_inIsSet = true
			}
		case 3:
			if field.Value.Type() == wire.TBinary {
				v.TokenType, err = field.Value.GetString(), error(nil)
				if err != nil {
					return err
				}
				token_typeIsSet = true
			}
		}
	}

	if !access_tokenIsSet {
		return errors.New("field AccessToken of AuthTokenResponse is required")
	}

	if !expires_inIsSet {
		return errors.New("field ExpiresIn of AuthTokenResponse is required")
	}

	if !token_typeIsSet {
		return errors.New("field TokenType of AuthTokenResponse is required")
	}

	return nil
}

// String returns a readable string representation of a AuthTokenResponse
// struct.
func (v *AuthTokenResponse) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [3]string
	i := 0
	fields[i] = fmt.Sprintf("AccessToken: %v", v.AccessToken)
	i++
	fields[i] = fmt.Sprintf("ExpiresIn: %v", v.ExpiresIn)
	i++
	fields[i] = fmt.Sprintf("TokenType: %v", v.TokenType)
	i++

	return fmt.Sprintf("AuthTokenResponse{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this AuthTokenResponse match the
// provided AuthTokenResponse.
//
// This function performs a deep comparison.
func (v *AuthTokenResponse) Equals(rhs *AuthTokenResponse) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}
	if !(v.AccessToken == rhs.AccessToken) {
		return false
	}
	if !(v.ExpiresIn == rhs.ExpiresIn) {
		return false
	}
	if !(v.TokenType == rhs.TokenType) {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of AuthTokenResponse.
func (v *AuthTokenResponse) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	enc.AddString("access_token", v.AccessToken)
	enc.AddInt32("expires_in", v.ExpiresIn)
	enc.AddString("token_type", v.TokenType)
	return err
}

// GetAccessToken returns the value of AccessToken if it is set or its
// zero value if it is unset.
func (v *AuthTokenResponse) GetAccessToken() (o string) {
	if v != nil {
		o = v.AccessToken
	}
	return
}

// GetExpiresIn returns the value of ExpiresIn if it is set or its
// zero value if it is unset.
func (v *AuthTokenResponse) GetExpiresIn() (o int32) {
	if v != nil {
		o = v.ExpiresIn
	}
	return
}

// GetTokenType returns the value of TokenType if it is set or its
// zero value if it is unset.
func (v *AuthTokenResponse) GetTokenType() (o string) {
	if v != nil {
		o = v.TokenType
	}
	return
}

type Product struct {
	ID           int32  `json:"id,required"`
	Name         string `json:"name,required"`
	Year         int32  `json:"year,required"`
	Color        string `json:"color,required"`
	PantoneValue string `json:"pantone_value,required"`
}

// ToWire translates a Product struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *Product) ToWire() (wire.Value, error) {
	var (
		fields [5]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	w, err = wire.NewValueI32(v.ID), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++

	w, err = wire.NewValueString(v.Name), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 2, Value: w}
	i++

	w, err = wire.NewValueI32(v.Year), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 3, Value: w}
	i++

	w, err = wire.NewValueString(v.Color), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 4, Value: w}
	i++

	w, err = wire.NewValueString(v.PantoneValue), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 5, Value: w}
	i++

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a Product struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a Product struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v Product
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *Product) FromWire(w wire.Value) error {
	var err error

	idIsSet := false
	nameIsSet := false
	yearIsSet := false
	colorIsSet := false
	pantone_valueIsSet := false

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TI32 {
				v.ID, err = field.Value.GetI32(), error(nil)
				if err != nil {
					return err
				}
				idIsSet = true
			}
		case 2:
			if field.Value.Type() == wire.TBinary {
				v.Name, err = field.Value.GetString(), error(nil)
				if err != nil {
					return err
				}
				nameIsSet = true
			}
		case 3:
			if field.Value.Type() == wire.TI32 {
				v.Year, err = field.Value.GetI32(), error(nil)
				if err != nil {
					return err
				}
				yearIsSet = true
			}
		case 4:
			if field.Value.Type() == wire.TBinary {
				v.Color, err = field.Value.GetString(), error(nil)
				if err != nil {
					return err
				}
				colorIsSet = true
			}
		case 5:
			if field.Value.Type() == wire.TBinary {
				v.PantoneValue, err = field.Value.GetString(), error(nil)
				if err != nil {
					return err
				}
				pantone_valueIsSet = true
			}
		}
	}

	if !idIsSet {
		return errors.New("field ID of Product is required")
	}

	if !nameIsSet {
		return errors.New("field Name of Product is required")
	}

	if !yearIsSet {
		return errors.New("field Year of Product is required")
	}

	if !colorIsSet {
		return errors.New("field Color of Product is required")
	}

	if !pantone_valueIsSet {
		return errors.New("field PantoneValue of Product is required")
	}

	return nil
}

// String returns a readable string representation of a Product
// struct.
func (v *Product) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [5]string
	i := 0
	fields[i] = fmt.Sprintf("ID: %v", v.ID)
	i++
	fields[i] = fmt.Sprintf("Name: %v", v.Name)
	i++
	fields[i] = fmt.Sprintf("Year: %v", v.Year)
	i++
	fields[i] = fmt.Sprintf("Color: %v", v.Color)
	i++
	fields[i] = fmt.Sprintf("PantoneValue: %v", v.PantoneValue)
	i++

	return fmt.Sprintf("Product{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this Product match the
// provided Product.
//
// This function performs a deep comparison.
func (v *Product) Equals(rhs *Product) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}
	if !(v.ID == rhs.ID) {
		return false
	}
	if !(v.Name == rhs.Name) {
		return false
	}
	if !(v.Year == rhs.Year) {
		return false
	}
	if !(v.Color == rhs.Color) {
		return false
	}
	if !(v.PantoneValue == rhs.PantoneValue) {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of Product.
func (v *Product) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	enc.AddInt32("id", v.ID)
	enc.AddString("name", v.Name)
	enc.AddInt32("year", v.Year)
	enc.AddString("color", v.Color)
	enc.AddString("pantone_value", v.PantoneValue)
	return err
}

// GetID returns the value of ID if it is set or its
// zero value if it is unset.
func (v *Product) GetID() (o int32) {
	if v != nil {
		o = v.ID
	}
	return
}

// GetName returns the value of Name if it is set or its
// zero value if it is unset.
func (v *Product) GetName() (o string) {
	if v != nil {
		o = v.Name
	}
	return
}

// GetYear returns the value of Year if it is set or its
// zero value if it is unset.
func (v *Product) GetYear() (o int32) {
	if v != nil {
		o = v.Year
	}
	return
}

// GetColor returns the value of Color if it is set or its
// zero value if it is unset.
func (v *Product) GetColor() (o string) {
	if v != nil {
		o = v.Color
	}
	return
}

// GetPantoneValue returns the value of PantoneValue if it is set or its
// zero value if it is unset.
func (v *Product) GetPantoneValue() (o string) {
	if v != nil {
		o = v.PantoneValue
	}
	return
}

// AuthToken_GetAuthToken_Args represents the arguments for the AuthToken.getAuthToken function.
//
// The arguments for getAuthToken are sent and received over the wire as this struct.
type AuthToken_GetAuthToken_Args struct {
	Authorization           string `json:"-"`
	FastPlatformCredentials string `json:"-"`
}

// ToWire translates a AuthToken_GetAuthToken_Args struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *AuthToken_GetAuthToken_Args) ToWire() (wire.Value, error) {
	var (
		fields [2]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	w, err = wire.NewValueString(v.Authorization), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 1, Value: w}
	i++

	w, err = wire.NewValueString(v.FastPlatformCredentials), error(nil)
	if err != nil {
		return w, err
	}
	fields[i] = wire.Field{ID: 2, Value: w}
	i++

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a AuthToken_GetAuthToken_Args struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a AuthToken_GetAuthToken_Args struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v AuthToken_GetAuthToken_Args
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *AuthToken_GetAuthToken_Args) FromWire(w wire.Value) error {
	var err error

	authorizationIsSet := false
	fastPlatformCredentialsIsSet := false

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TBinary {
				v.Authorization, err = field.Value.GetString(), error(nil)
				if err != nil {
					return err
				}
				authorizationIsSet = true
			}
		case 2:
			if field.Value.Type() == wire.TBinary {
				v.FastPlatformCredentials, err = field.Value.GetString(), error(nil)
				if err != nil {
					return err
				}
				fastPlatformCredentialsIsSet = true
			}
		}
	}

	if !authorizationIsSet {
		return errors.New("field Authorization of AuthToken_GetAuthToken_Args is required")
	}

	if !fastPlatformCredentialsIsSet {
		return errors.New("field FastPlatformCredentials of AuthToken_GetAuthToken_Args is required")
	}

	return nil
}

// String returns a readable string representation of a AuthToken_GetAuthToken_Args
// struct.
func (v *AuthToken_GetAuthToken_Args) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [2]string
	i := 0
	fields[i] = fmt.Sprintf("Authorization: %v", v.Authorization)
	i++
	fields[i] = fmt.Sprintf("FastPlatformCredentials: %v", v.FastPlatformCredentials)
	i++

	return fmt.Sprintf("AuthToken_GetAuthToken_Args{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this AuthToken_GetAuthToken_Args match the
// provided AuthToken_GetAuthToken_Args.
//
// This function performs a deep comparison.
func (v *AuthToken_GetAuthToken_Args) Equals(rhs *AuthToken_GetAuthToken_Args) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}
	if !(v.Authorization == rhs.Authorization) {
		return false
	}
	if !(v.FastPlatformCredentials == rhs.FastPlatformCredentials) {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of AuthToken_GetAuthToken_Args.
func (v *AuthToken_GetAuthToken_Args) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	enc.AddString("authorization", v.Authorization)
	enc.AddString("fastPlatformCredentials", v.FastPlatformCredentials)
	return err
}

// GetAuthorization returns the value of Authorization if it is set or its
// zero value if it is unset.
func (v *AuthToken_GetAuthToken_Args) GetAuthorization() (o string) {
	if v != nil {
		o = v.Authorization
	}
	return
}

// GetFastPlatformCredentials returns the value of FastPlatformCredentials if it is set or its
// zero value if it is unset.
func (v *AuthToken_GetAuthToken_Args) GetFastPlatformCredentials() (o string) {
	if v != nil {
		o = v.FastPlatformCredentials
	}
	return
}

// MethodName returns the name of the Thrift function as specified in
// the IDL, for which this struct represent the arguments.
//
// This will always be "getAuthToken" for this struct.
func (v *AuthToken_GetAuthToken_Args) MethodName() string {
	return "getAuthToken"
}

// EnvelopeType returns the kind of value inside this struct.
//
// This will always be Call for this struct.
func (v *AuthToken_GetAuthToken_Args) EnvelopeType() wire.EnvelopeType {
	return wire.Call
}

// AuthToken_GetAuthToken_Helper provides functions that aid in handling the
// parameters and return values of the AuthToken.getAuthToken
// function.
var AuthToken_GetAuthToken_Helper = struct {
	// Args accepts the parameters of getAuthToken in-order and returns
	// the arguments struct for the function.
	Args func(
		authorization string,
		fastPlatformCredentials string,
	) *AuthToken_GetAuthToken_Args

	// IsException returns true if the given error can be thrown
	// by getAuthToken.
	//
	// An error can be thrown by getAuthToken only if the
	// corresponding exception type was mentioned in the 'throws'
	// section for it in the Thrift file.
	IsException func(error) bool

	// WrapResponse returns the result struct for getAuthToken
	// given its return value and error.
	//
	// This allows mapping values and errors returned by
	// getAuthToken into a serializable result struct.
	// WrapResponse returns a non-nil error if the provided
	// error cannot be thrown by getAuthToken
	//
	//   value, err := getAuthToken(args)
	//   result, err := AuthToken_GetAuthToken_Helper.WrapResponse(value, err)
	//   if err != nil {
	//     return fmt.Errorf("unexpected error from getAuthToken: %v", err)
	//   }
	//   serialize(result)
	WrapResponse func(*AuthTokenResponse, error) (*AuthToken_GetAuthToken_Result, error)

	// UnwrapResponse takes the result struct for getAuthToken
	// and returns the value or error returned by it.
	//
	// The error is non-nil only if getAuthToken threw an
	// exception.
	//
	//   result := deserialize(bytes)
	//   value, err := AuthToken_GetAuthToken_Helper.UnwrapResponse(result)
	UnwrapResponse func(*AuthToken_GetAuthToken_Result) (*AuthTokenResponse, error)
}{}

func init() {
	AuthToken_GetAuthToken_Helper.Args = func(
		authorization string,
		fastPlatformCredentials string,
	) *AuthToken_GetAuthToken_Args {
		return &AuthToken_GetAuthToken_Args{
			Authorization:           authorization,
			FastPlatformCredentials: fastPlatformCredentials,
		}
	}

	AuthToken_GetAuthToken_Helper.IsException = func(err error) bool {
		switch err.(type) {
		default:
			return false
		}
	}

	AuthToken_GetAuthToken_Helper.WrapResponse = func(success *AuthTokenResponse, err error) (*AuthToken_GetAuthToken_Result, error) {
		if err == nil {
			return &AuthToken_GetAuthToken_Result{Success: success}, nil
		}

		return nil, err
	}
	AuthToken_GetAuthToken_Helper.UnwrapResponse = func(result *AuthToken_GetAuthToken_Result) (success *AuthTokenResponse, err error) {

		if result.Success != nil {
			success = result.Success
			return
		}

		err = errors.New("expected a non-void result")
		return
	}

}

// AuthToken_GetAuthToken_Result represents the result of a AuthToken.getAuthToken function call.
//
// The result of a getAuthToken execution is sent and received over the wire as this struct.
//
// Success is set only if the function did not throw an exception.
type AuthToken_GetAuthToken_Result struct {
	// Value returned by getAuthToken after a successful execution.
	Success *AuthTokenResponse `json:"success,omitempty"`
}

// ToWire translates a AuthToken_GetAuthToken_Result struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *AuthToken_GetAuthToken_Result) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Success != nil {
		w, err = v.Success.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 0, Value: w}
		i++
	}

	if i != 1 {
		return wire.Value{}, fmt.Errorf("AuthToken_GetAuthToken_Result should have exactly one field: got %v fields", i)
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _AuthTokenResponse_Read(w wire.Value) (*AuthTokenResponse, error) {
	var v AuthTokenResponse
	err := v.FromWire(w)
	return &v, err
}

// FromWire deserializes a AuthToken_GetAuthToken_Result struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a AuthToken_GetAuthToken_Result struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v AuthToken_GetAuthToken_Result
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *AuthToken_GetAuthToken_Result) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 0:
			if field.Value.Type() == wire.TStruct {
				v.Success, err = _AuthTokenResponse_Read(field.Value)
				if err != nil {
					return err
				}

			}
		}
	}

	count := 0
	if v.Success != nil {
		count++
	}
	if count != 1 {
		return fmt.Errorf("AuthToken_GetAuthToken_Result should have exactly one field: got %v fields", count)
	}

	return nil
}

// String returns a readable string representation of a AuthToken_GetAuthToken_Result
// struct.
func (v *AuthToken_GetAuthToken_Result) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [1]string
	i := 0
	if v.Success != nil {
		fields[i] = fmt.Sprintf("Success: %v", v.Success)
		i++
	}

	return fmt.Sprintf("AuthToken_GetAuthToken_Result{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this AuthToken_GetAuthToken_Result match the
// provided AuthToken_GetAuthToken_Result.
//
// This function performs a deep comparison.
func (v *AuthToken_GetAuthToken_Result) Equals(rhs *AuthToken_GetAuthToken_Result) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}
	if !((v.Success == nil && rhs.Success == nil) || (v.Success != nil && rhs.Success != nil && v.Success.Equals(rhs.Success))) {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of AuthToken_GetAuthToken_Result.
func (v *AuthToken_GetAuthToken_Result) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	if v.Success != nil {
		err = multierr.Append(err, enc.AddObject("success", v.Success))
	}
	return err
}

// GetSuccess returns the value of Success if it is set or its
// zero value if it is unset.
func (v *AuthToken_GetAuthToken_Result) GetSuccess() (o *AuthTokenResponse) {
	if v != nil && v.Success != nil {
		return v.Success
	}

	return
}

// IsSetSuccess returns true if Success is not nil.
func (v *AuthToken_GetAuthToken_Result) IsSetSuccess() bool {
	return v != nil && v.Success != nil
}

// MethodName returns the name of the Thrift function as specified in
// the IDL, for which this struct represent the result.
//
// This will always be "getAuthToken" for this struct.
func (v *AuthToken_GetAuthToken_Result) MethodName() string {
	return "getAuthToken"
}

// EnvelopeType returns the kind of value inside this struct.
//
// This will always be Reply for this struct.
func (v *AuthToken_GetAuthToken_Result) EnvelopeType() wire.EnvelopeType {
	return wire.Reply
}

// MultiCalls_GetRandomProduct_Args represents the arguments for the MultiCalls.getRandomProduct function.
//
// The arguments for getRandomProduct are sent and received over the wire as this struct.
type MultiCalls_GetRandomProduct_Args struct {
}

// ToWire translates a MultiCalls_GetRandomProduct_Args struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *MultiCalls_GetRandomProduct_Args) ToWire() (wire.Value, error) {
	var (
		fields [0]wire.Field
		i      int = 0
	)

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

// FromWire deserializes a MultiCalls_GetRandomProduct_Args struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a MultiCalls_GetRandomProduct_Args struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v MultiCalls_GetRandomProduct_Args
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *MultiCalls_GetRandomProduct_Args) FromWire(w wire.Value) error {

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		}
	}

	return nil
}

// String returns a readable string representation of a MultiCalls_GetRandomProduct_Args
// struct.
func (v *MultiCalls_GetRandomProduct_Args) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [0]string
	i := 0

	return fmt.Sprintf("MultiCalls_GetRandomProduct_Args{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this MultiCalls_GetRandomProduct_Args match the
// provided MultiCalls_GetRandomProduct_Args.
//
// This function performs a deep comparison.
func (v *MultiCalls_GetRandomProduct_Args) Equals(rhs *MultiCalls_GetRandomProduct_Args) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of MultiCalls_GetRandomProduct_Args.
func (v *MultiCalls_GetRandomProduct_Args) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	return err
}

// MethodName returns the name of the Thrift function as specified in
// the IDL, for which this struct represent the arguments.
//
// This will always be "getRandomProduct" for this struct.
func (v *MultiCalls_GetRandomProduct_Args) MethodName() string {
	return "getRandomProduct"
}

// EnvelopeType returns the kind of value inside this struct.
//
// This will always be Call for this struct.
func (v *MultiCalls_GetRandomProduct_Args) EnvelopeType() wire.EnvelopeType {
	return wire.Call
}

// MultiCalls_GetRandomProduct_Helper provides functions that aid in handling the
// parameters and return values of the MultiCalls.getRandomProduct
// function.
var MultiCalls_GetRandomProduct_Helper = struct {
	// Args accepts the parameters of getRandomProduct in-order and returns
	// the arguments struct for the function.
	Args func() *MultiCalls_GetRandomProduct_Args

	// IsException returns true if the given error can be thrown
	// by getRandomProduct.
	//
	// An error can be thrown by getRandomProduct only if the
	// corresponding exception type was mentioned in the 'throws'
	// section for it in the Thrift file.
	IsException func(error) bool

	// WrapResponse returns the result struct for getRandomProduct
	// given its return value and error.
	//
	// This allows mapping values and errors returned by
	// getRandomProduct into a serializable result struct.
	// WrapResponse returns a non-nil error if the provided
	// error cannot be thrown by getRandomProduct
	//
	//   value, err := getRandomProduct(args)
	//   result, err := MultiCalls_GetRandomProduct_Helper.WrapResponse(value, err)
	//   if err != nil {
	//     return fmt.Errorf("unexpected error from getRandomProduct: %v", err)
	//   }
	//   serialize(result)
	WrapResponse func(*Product, error) (*MultiCalls_GetRandomProduct_Result, error)

	// UnwrapResponse takes the result struct for getRandomProduct
	// and returns the value or error returned by it.
	//
	// The error is non-nil only if getRandomProduct threw an
	// exception.
	//
	//   result := deserialize(bytes)
	//   value, err := MultiCalls_GetRandomProduct_Helper.UnwrapResponse(result)
	UnwrapResponse func(*MultiCalls_GetRandomProduct_Result) (*Product, error)
}{}

func init() {
	MultiCalls_GetRandomProduct_Helper.Args = func() *MultiCalls_GetRandomProduct_Args {
		return &MultiCalls_GetRandomProduct_Args{}
	}

	MultiCalls_GetRandomProduct_Helper.IsException = func(err error) bool {
		switch err.(type) {
		default:
			return false
		}
	}

	MultiCalls_GetRandomProduct_Helper.WrapResponse = func(success *Product, err error) (*MultiCalls_GetRandomProduct_Result, error) {
		if err == nil {
			return &MultiCalls_GetRandomProduct_Result{Success: success}, nil
		}

		return nil, err
	}
	MultiCalls_GetRandomProduct_Helper.UnwrapResponse = func(result *MultiCalls_GetRandomProduct_Result) (success *Product, err error) {

		if result.Success != nil {
			success = result.Success
			return
		}

		err = errors.New("expected a non-void result")
		return
	}

}

// MultiCalls_GetRandomProduct_Result represents the result of a MultiCalls.getRandomProduct function call.
//
// The result of a getRandomProduct execution is sent and received over the wire as this struct.
//
// Success is set only if the function did not throw an exception.
type MultiCalls_GetRandomProduct_Result struct {
	// Value returned by getRandomProduct after a successful execution.
	Success *Product `json:"success,omitempty"`
}

// ToWire translates a MultiCalls_GetRandomProduct_Result struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *MultiCalls_GetRandomProduct_Result) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Success != nil {
		w, err = v.Success.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 0, Value: w}
		i++
	}

	if i != 1 {
		return wire.Value{}, fmt.Errorf("MultiCalls_GetRandomProduct_Result should have exactly one field: got %v fields", i)
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _Product_Read(w wire.Value) (*Product, error) {
	var v Product
	err := v.FromWire(w)
	return &v, err
}

// FromWire deserializes a MultiCalls_GetRandomProduct_Result struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a MultiCalls_GetRandomProduct_Result struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v MultiCalls_GetRandomProduct_Result
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *MultiCalls_GetRandomProduct_Result) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 0:
			if field.Value.Type() == wire.TStruct {
				v.Success, err = _Product_Read(field.Value)
				if err != nil {
					return err
				}

			}
		}
	}

	count := 0
	if v.Success != nil {
		count++
	}
	if count != 1 {
		return fmt.Errorf("MultiCalls_GetRandomProduct_Result should have exactly one field: got %v fields", count)
	}

	return nil
}

// String returns a readable string representation of a MultiCalls_GetRandomProduct_Result
// struct.
func (v *MultiCalls_GetRandomProduct_Result) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [1]string
	i := 0
	if v.Success != nil {
		fields[i] = fmt.Sprintf("Success: %v", v.Success)
		i++
	}

	return fmt.Sprintf("MultiCalls_GetRandomProduct_Result{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this MultiCalls_GetRandomProduct_Result match the
// provided MultiCalls_GetRandomProduct_Result.
//
// This function performs a deep comparison.
func (v *MultiCalls_GetRandomProduct_Result) Equals(rhs *MultiCalls_GetRandomProduct_Result) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}
	if !((v.Success == nil && rhs.Success == nil) || (v.Success != nil && rhs.Success != nil && v.Success.Equals(rhs.Success))) {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of MultiCalls_GetRandomProduct_Result.
func (v *MultiCalls_GetRandomProduct_Result) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	if v.Success != nil {
		err = multierr.Append(err, enc.AddObject("success", v.Success))
	}
	return err
}

// GetSuccess returns the value of Success if it is set or its
// zero value if it is unset.
func (v *MultiCalls_GetRandomProduct_Result) GetSuccess() (o *Product) {
	if v != nil && v.Success != nil {
		return v.Success
	}

	return
}

// IsSetSuccess returns true if Success is not nil.
func (v *MultiCalls_GetRandomProduct_Result) IsSetSuccess() bool {
	return v != nil && v.Success != nil
}

// MethodName returns the name of the Thrift function as specified in
// the IDL, for which this struct represent the result.
//
// This will always be "getRandomProduct" for this struct.
func (v *MultiCalls_GetRandomProduct_Result) MethodName() string {
	return "getRandomProduct"
}

// EnvelopeType returns the kind of value inside this struct.
//
// This will always be Reply for this struct.
func (v *MultiCalls_GetRandomProduct_Result) EnvelopeType() wire.EnvelopeType {
	return wire.Reply
}
